{"version":3,"sources":["components/InputForm/InputForm.js","components/ToDoListItem/ToDoListItem.js","components/ToDoList/ToDoList.js","components/ItemCounter/ItemCounter.js","containers/App.js","serviceWorker.js","index.js"],"names":["InputForm","_ref","input","onInputChange","onButtonSubmit","onToggleSelectAll","onDeleteDone","onDeleteAll","react_default","a","createElement","className","autoFocus","value","id","type","placeholder","onChange","onKeyDown","event","keyCode","onClick","ToDoListItem","toDoText","isChecked","onCheckboxClick","onDeleteClick","defaultChecked","ToDoList","toDoList","map","toDoItem","index","components_ToDoListItem_ToDoListItem","key","uuid","v4","text","done","ItemCounter","nextProps","listLength","this","props","concat","Component","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","target","state","list","indexToToggle","item","indexToRemove","filter","checked","_this2","fetch","then","resposne","json","initalList","components_InputForm_InputForm","components_ToDoList_ToDoList","components_ItemCounter_ItemCounter","length","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e5b73ebb.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './InputForm.css';\n\nconst InputForm = ({ input, onInputChange, onButtonSubmit, onToggleSelectAll, onDeleteDone, onDeleteAll }) => {\n\n    const handleKeyPress = (event) => {\n        if (event.keyCode === 13) {\n            onButtonSubmit();\n        }\n    };\n\n    return (\n        <div className='form'>\n            <div className='textform'>\n                <input\n                    autoFocus\n                    value={input}\n                    id='textbox'\n                    type=\"text\"\n                    placeholder=\"To-Do...\"\n                    onChange={onInputChange}\n                    onKeyDown={handleKeyPress}\n                />\n                <button\n                    className=\"button\"\n                    onClick={onButtonSubmit}\n                >{\"Submit\"}</button>\n            </div>\n            <div className='controls'>\n                <button\n                    className=\"button\"\n                    onClick={onDeleteDone}\n                >{\"Delete Done\"}</button>\n                <button\n                    className=\"button\"\n                    onClick={onDeleteAll}\n                >{\"Delete All\"}\n                </button>\n                <label\n                    className='toggleLabel'>\n                    <input\n                        type='checkbox'\n                        id='toggleCheckbox'\n                        onChange={onToggleSelectAll} />\n                    {\"Check All/None\"}\n                </label>\n            </div>\n        </div>\n    );\n};\n\nInputForm.propTypes = {\n    input: PropTypes.string,\n    onInputChange: PropTypes.func,\n    onButtonSubmit: PropTypes.func,\n    onToggleSelectAll: PropTypes.func,\n    onDeleteDone: PropTypes.func,\n    onDeleteAll: PropTypes.func,\n};\n\nexport default InputForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './ToDoListItem.css';\n\nconst ToDoListItem = ({ toDoText, isChecked, onCheckboxClick, onDeleteClick }) => {\n    return (\n        <div className=\"toDoItem\">\n            <div className=\"checkboxAndText\">\n                <label className=\"toToLabel\">\n                    <input\n                        type=\"checkbox\"\n                        defaultChecked={isChecked}\n                        onChange={onCheckboxClick}\n                    />\n                    {isChecked\n                        ? <strike>{toDoText}</strike>\n                        : <span>{toDoText}</span>\n                    }\n                </label>\n            </div>\n            <button\n                className=\"button\"\n                id='deleteItemButton'\n                onClick={onDeleteClick}\n            >{\"Delete\"}</button>\n        </div>\n    );\n};\n\nToDoListItem.propTypes = {\n    toDoText: PropTypes.string,\n    isChecked: PropTypes.bool,\n    onCheckboxClick: PropTypes.func,\n    onDeleteClick: PropTypes.func\n};\n\nexport default ToDoListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ToDoListItem from '../ToDoListItem/ToDoListItem';\nimport uuid from 'uuid';\n\nimport './ToDoList.css';\n\nconst ToDoList = ({ toDoList, onCheckboxClick, onDeleteClick }) => {\n    return (\n        <div className='center'>\n            <div className='box'>\n                {\n                    toDoList.map((toDoItem, index) => {\n                        return (\n                            <ToDoListItem\n                                key={uuid.v4()}\n                                toDoText={toDoItem.text}\n                                isChecked={toDoItem.done}\n                                onCheckboxClick={() => onCheckboxClick(index)}\n                                onDeleteClick={() => onDeleteClick(index)}\n                            />\n                        );\n                    })\n                }\n            </div>\n        </div>\n    );\n};\n\nToDoList.propTypes = {\n    toDoList: PropTypes.arrayOf(PropTypes.object),\n    onCheckboxClick: PropTypes.func,\n    onDeleteClick: PropTypes.func\n};\n\nexport default ToDoList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ItemCounter extends Component {\n\n    shouldComponentUpdate(nextProps) {\n        // console.log('shouldComponentUpdate(nextProps)');\n        // console.log('nextProps.listLength', nextProps.listLength);\n        // console.log('this.props.listLength', this.props.listLength);\n        return nextProps.listLength !== this.props.listLength;\n    }\n\n    render() {\n        // console.log('RENDERED');\n        return (\n            <div className=\"center\">\n                <h3>{`Total Number of List Items: ${this.props.listLength}`}</h3>\n            </div>\n        );\n\n    }\n}\n\nItemCounter.propTypes = {\n    listLength: PropTypes.number\n};\n\nexport default ItemCounter;\n","import React, { Component } from 'react';\nimport InputForm from '../components/InputForm/InputForm';\nimport ToDoList from '../components/ToDoList/ToDoList';\nimport ItemCounter from '../components/ItemCounter/ItemCounter';\nimport './App.css';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: '',\n      list: []\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://api.myjson.com/bins/1b3qs9') // This is a JSON file I've stored on a remote server. See: initialList.json for content.\n      .then(resposne => resposne.json())\n      .then(initalList => { this.setState({ list: initalList }); });\n  }\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  }\n\n  onButtonSubmit = () => {\n    if (this.state.input !== '') {\n      this.setState({\n        list:\n          this.state.list.concat({\n            text: this.state.input,\n            done: false\n          }),\n        input: ''\n      });\n    }\n  }\n\n  onCheckboxClick = (indexToToggle) => {\n    this.setState({\n      list:\n        this.state.list.map((item, index) => {\n          if (index === indexToToggle) {\n            item.done = !item.done;\n            return item;\n          } else {\n            return item;\n          }\n        })\n    });\n  }\n\n  onDeleteClick = (indexToRemove) => {\n    this.setState({\n      list:\n        this.state.list.filter((item, index) =>\n          index !== indexToRemove)\n    });\n  };\n\n  onDeleteDone = () => {\n    this.setState({\n      list:\n        this.state.list.filter(item =>\n          item.done === false)\n    });\n  };\n\n  onDeleteAll = () => {\n    this.setState({ list: [] });\n  }\n\n  onToggleSelectAll = (event) => {\n    const isChecked = event.target.checked;\n    this.setState({\n      list:\n        this.state.list.map(item => {\n          item.done = isChecked;\n          return item;\n        })\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <InputForm\n          input={this.state.input}\n          onInputChange={this.onInputChange}\n          onButtonSubmit={this.onButtonSubmit}\n          onToggleSelectAll={this.onToggleSelectAll}\n          onDeleteDone={this.onDeleteDone}\n          onDeleteAll={this.onDeleteAll}\n        />\n        <ToDoList\n          toDoList={this.state.list}\n          onCheckboxClick={this.onCheckboxClick}\n          onDeleteClick={this.onDeleteClick}\n        />\n        <ItemCounter\n          listLength={this.state.list.length} \n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}